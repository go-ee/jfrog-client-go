name: JFrog Client Go Tests
on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [labeled]
# Ensures that only the latest commit is running for each PR at a time.
# Ignores this rule for push events.
concurrency:
  group: ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  Pretest:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Unlabel 'safe to test'
        uses: actions-ecosystem/action-remove-labels@v1
        if: ${{github.event_name != 'push' }}
        with:
          labels: "safe to test"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Lint
        run: go vet -v ./...

  JFrog-Client-Go-Artifactory-Tests:
    name: ${{ matrix.suite }} ${{ matrix.os }}
    needs: Pretest
    strategy:
      fail-fast: false
      matrix:
        suite: [artifactory]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Setup Artifactory
        run: |
          go install github.com/jfrog/jfrog-testing-infra/local-rt-setup@latest
          ~/go/bin/local-rt-setup
        env:
          RTLIC: ${{secrets.RTLIC}}
          GOPROXY: direct

      - name: artifactory tests
        run: go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.artifactory --ci.runId=${{ runner.os }}-${{ matrix.suite }}

  JFrog-Client-Go-Ds-Xr-Access-Tests:
    needs: Pretest
    name: ${{ matrix.suite }} ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        suite: [distribution, xray, access]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: ${{ matrix.suite }} tests
        run: go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.${{ matrix.suite }} --rt.url=$RT_URL --ds.url=$DIST_URL --xr.url=$XRAY_URL --access.url=$ACCESS_URL --rt.user=$PLATFORM_USER --rt.password=$PLATFORM_PASSWORD --access.token=$PLATFORM_ADMIN_TOKEN --ci.runId=${{ runner.os }}-${{ matrix.suite }}
        env:
          RT_URL: ${{ secrets.PLATFORM_URL }}/artifactory
          DIST_URL: ${{ secrets.PLATFORM_URL }}/distribution
          XRAY_URL: ${{ secrets.PLATFORM_URL }}/xray
          ACCESS_URL: ${{ secrets.PLATFORM_URL }}/access
          PLATFORM_USER: ${{ secrets.PLATFORM_USER }}
          PLATFORM_PASSWORD: ${{ secrets.PLATFORM_PASSWORD }}
          PLATFORM_ADMIN_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}

  JFrog-Client-Go-Pipelines-Tests:
    needs: Pretest
    name: pipelines ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: pipelines tests
        run: go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.pipelines --rt.url=$RT_URL --pipe.url=$PIPE_URL --rt.user=$PLATFORM_USER --rt.password=$PLATFORM_PASSWORD --pipe.accessToken=$PLATFORM_ADMIN_TOKEN --pipe.vcsToken=$CLI_PIPE_VCS_TOKEN --pipe.vcsRepo=$CLI_PIPE_VCS_REPO --pipe.vcsBranch=$CLI_PIPE_VCS_BRANCH --ci.runId=${{ runner.os }}_pipe
        env:
          RT_URL: ${{ secrets.PLATFORM_URL }}/artifactory
          PIPE_URL: ${{ secrets.PLATFORM_URL }}/pipelines
          PLATFORM_USER: ${{ secrets.PLATFORM_USER }}
          PLATFORM_PASSWORD: ${{ secrets.PLATFORM_PASSWORD }}
          PLATFORM_ADMIN_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}
          CLI_PIPE_VCS_TOKEN: ${{ secrets.CLI_PIPE_VCS_TOKEN }}
          CLI_PIPE_VCS_REPO: ${{ secrets.CLI_PIPE_VCS_REPO }}
          CLI_PIPE_VCS_BRANCH: ${{ secrets.CLI_PIPE_VCS_BRANCH }}

  JFrog-Client-Go-Repositories-Tests:
    needs: Pretest
    name: repositories ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Setup Artifactory
        run: |
          go install github.com/jfrog/jfrog-testing-infra/local-rt-setup@latest
          ~/go/bin/local-rt-setup
        env:
          RTLIC: ${{secrets.RTLIC}}
          GOPROXY: direct

      - name: Repositories tests
        run: go test -v github.com/jfrog/jfrog-client-go/tests --timeout 0 --test.repositories
